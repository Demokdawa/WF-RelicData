# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import relic_pb2 as relic__pb2


class DataSenderStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.send_data = channel.unary_unary(
        '/DataSender/send_data',
        request_serializer=relic__pb2.Empty.SerializeToString,
        response_deserializer=relic__pb2.MyData.FromString,
        )


class DataSenderServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def send_data(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DataSenderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'send_data': grpc.unary_unary_rpc_method_handler(
          servicer.send_data,
          request_deserializer=relic__pb2.Empty.FromString,
          response_serializer=relic__pb2.MyData.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DataSender', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
